root ::= module_body | module_interface_file

module_body ::= use_clause* body_decls* EOF

module_interface_file ::= use_clause* interface_decls* EOF

use_clause ::= ("use" path_id "as" ID ";")

path_id ::= ID ("::" ID)*

ID ::= WORD

body_decls ::= types_and_globals | user_op_decl

types_and_globals ::= "group" (group_decl ";")* | "type" (type_decl ";")* | "const" (const_decl ";")* | "sensor" (sensor_decl ";")*

user_op_decl ::= inline_o op_kind ID size_decl_o params "returns" params where_decls_o spec_decl_o opt_body

inline_o ::= "inline"?

op_kind ::= "function" | "node"

size_decl_o ::= ("<<" id_or_l ">>")?

id_or_l ::= ID ("," ID)*

params ::= ("(" ")") | ("(" var_decl_l SC_o ")")

SC_o ::= ";"?

where_decls_o ::= where_decl*

where_decl ::= ("where" typevar_l numeric_kind)

typevar_l ::= typevar ("," typevar)*

typevar ::= NAME

NAME ::= "'" ID

numeric_kind ::= "numeric" | "integer" | "signed" | "unsigned" | "float"

spec_decl_o ::= ("specialize" path_id)?

opt_body ::= ";" | data_def

data_def ::= equation | scope

scope ::= "{" scope_section_l "}"

scope_section_l ::= scope_section+

scope_section ::= variable_section | equation_section | emission_section | assert_section | diagram_section

diagram_section ::= "diagram" object_l

object_l ::= object+

object ::= "(" description local_objects ")"

description ::= (lunum_o luid_o graph_item) | def_by_case | scope_section | (lunum_o test_description)

local_objects ::= ("where" object_l)?

test_description ::= ("_sensor" sensor_lhs)

sensor_lhs ::= path_id

def_by_case ::= (lhs_o state_machine) | (lhs_o select_activation)

select_activation ::= ("activate" luid_o if_activation) | ("activate" luid_o match_activation)

if_activation ::= "if" expr "then" ifte_branch elsif_branch_l "else" ifte_branch

elsif_branch_l ::= ("elsif" expr "then" ifte_branch)*

ifte_branch ::= data_def | if_activation

match_activation ::= "when" expr "match" match_l

match_l ::= match+

match ::= "|" pattern_with_capture ":" data_def

pattern_with_capture ::= pattern | (path_id "{" ID "}")

lhs_o ::= (lhs ":")?

lhs ::= ("(" ")") | lhs_item_l | (lhs_item_l "," "..")

lhs_item_l ::= lhs_item ("," lhs_item)*

lhs_item ::= ID | "_"

state_machine ::= "automaton" luid_o state_machine_item_l

state_machine_item_l ::= state_machine_item+

state_machine_item ::= state_decl | transition_decl

state_decl ::= initial_o "state" state_id ":" unless_o scope_section_l until_o

initial_o ::= "initial"?

state_id ::= ID | lunum | (lunum ID)

unless_o ::= ("unless" transition_l)?

until_o ::= ("until" transition_l)?

transition_l ::= transition+

transition_decl ::= (priority state_ref "unless" transition) | (priority state_ref "until" transition)

priority ::= (":" ":") | (":" INTEGER_LIT ":")

state_ref ::= ID | LUNUM

transition ::= ("if" guarded_arrow ";") | (scope_o target ";")

guarded_arrow ::= "(" expr ")" arrow

arrow ::= (scope_o target) | (scope_o fork)

scope_o ::= scope?

target ::= ("restart" state_ref) | ("resume" state_ref)

fork ::= ("if" guarded_arrow elsif_guarded_arrow_l else_arrow_o "end") | (fork_priority_l "end")

elsif_guarded_arrow_l ::= ("elsif" guarded_arrow)*

else_arrow_o ::= ("else" arrow)?

fork_priority_l ::= fork_priority+

fork_priority ::= (priority "if" guarded_arrow) | (priority "else" arrow)

lunum_o ::= lunum?

lunum ::= LUNUM

graph_item ::= ("expr" expr) | ("def" lhs) | ("block" operator_block) | ("wire" connection "=>" connection_l) | ("group" group_operation_o)

group_operation_o ::= ("(" ")") | "byname" | "bypos"

connection ::= (port group_adaptation) | port | ("(" ")")

connection_l ::= connection ("," connection)*

port ::= instance_id

instance_id ::= luid | lunum | "self"

operator_block ::= operator | op_expr

operator ::= prefix_op size_spec_o

prefix_op ::= path_id | prefix_primitive | ("(" op_expr ")") | ("(" "op_expr" ")")

prefix_primitive ::= "reverse" | "transpose" | ("transpose" "{" integer_l "}") | "pack" | "flatten"

integer_l ::= INTEGER_LIT ("," INTEGER_LIT)*

size_spec_o ::= ("<<" expr_list ">>")?

expr_list ::= expr ("," expr)*

op_expr ::= (iterator operator) | ("activate" operator "every" clock_expr) | ("activate" operator "every" expr activate_condition_kind expr) | ("restart" operator "every" expr) | anonymous_op | (operator "\\" partial_group) | n_ary_op | ("_source" ID) | ("_oracle" ID)

activate_condition_kind ::= "last" | "default"

anonymous_op ::= (op_kind params "returns" params data_def) | (op_kind id_l scope_section_l "=>" expr)

iterator ::= "map" | "fold" | "mapfold" | "mapi" | "foldi" | "mapfoldi"

id_l ::= ID ("," ID)*

partial_group ::= opt_group_item ("," opt_group_item)*

opt_group_item ::= "_" | group_item

emission_section ::= "emit" emission_body_l_o

emission_body_l_o ::= (emission_body ";")*

emission_body ::= (luid_o flow_names) | (luid_o flow_names "if" expr)

flow_names ::= NAME ("," NAME)*

variable_section ::= "var" var_decl_l_o

var_decl_l_o ::= (var_decl_l ";")?

var_decl_l ::= var_decl (";" var_decl)*

var_decl ::= (var_id var_type_expr_o when_decl_o default_decl_o last_decl_o)

var_type_expr_o ::= (":" group_type_expr)?

group_type_expr ::= type_expr | ("(" group_type_expr_l id_group_type_l_o ")")  | ("(" id_group_type_expr_l ")")

group_type_expr_l ::= group_type_expr ("," group_type_expr)*

id_group_type_expr_l ::= id_group_type_expr ("," id_group_type_expr)*

id_group_type_expr ::= ID ":" group_type_expr

id_group_type_l_o ::= ("," id_group_type_expr_l)?

var_id ::= ID | ("clock" ID)

when_decl_o ::= ("when" clock_expr)?

default_decl_o ::= ("default" "=" expr)?

last_decl_o ::= ("last" "=" expr)?

equation_section ::= "let" equation_l_o

equation_l_o ::= equation_l?

equation_l ::= equation+

assert_section ::= assert_kind verif_expr_l

assert_kind ::= "assert" | "assume" | "guarantee"

verif_expr_l ::= verif_expr*

verif_expr ::= LUID ":" expr ";"

equation ::= (lhs luid_o "=" expr ";") | (def_by_case ";")

luid_o ::= LUID?

LUID ::= "$" ID

luid ::= LUID

expr ::= when_expr

when_expr ::= or_expr ( ("when" clock_expr) | ("when" "match" path_id) )*

or_expr ::= and_expr ( ("lor" | "or" | "xor" | "lxor") and_expr )*
and_expr ::= rel_expr ( ("land" | "and") rel_expr )*
rel_expr ::= add_expr ( ("=" | "<>" | "<" | ">" | "<=" | ">=") add_expr )*
add_expr ::= mul_expr ( ("+" | "-") mul_expr )*
mul_expr ::= pow_expr ( ("*" | "/" | "mod" | "lsl" | "lsr" | "@") pow_expr )*
pow_expr ::= unary_expr ( "^" unary_expr )*     # right-ish assoc but no LR

unary_expr ::= ("-" | "+" | "lnot" | "not" | "pre") unary_expr | postfix_expr

# postfixes that used to cause LR via composite_expr/group_expr
postfix_expr ::= primary ( label_or_index | group_adaptation | "[" expr ".." expr "]" )*

primary ::= id_expr | atom | "(" expr ")" | "(" expr ":>" type_expr ")" | "[" group "]" | struct_expr | variant_expr | switch_expr | fwd_expr | operator "(" group ")" | port | multigroup_prefix

id_expr ::= path_id | ("last" NAME)

atom ::= "true" | "false" | CHAR_LIT | INTEGER_LIT | TYPED_INTEGER_LIT | FLOAT_LIT | TYPED_FLOAT_LIT

unary_op ::= "-" | "+" | "lnot" | "not" | "pre"

binary_op ::= "+" | "-" | "*" | "/" | "mod" | "land" | "lor" | "lxor" | "lsl" | "lsr" | "=" | "<>" | "<" | ">" | "<=" | ">=" | "and" | "or" | "xor" | "->" | "pre" | "@"

n_ary_op ::= "+" | "*" | "@"  | "and" | "or" | "xor" | "land" | "lor" | "lxor"

clock_expr ::= ID | ("not" ID) | ("(" ID "match" pattern ")")

pattern ::= path_id | (path_id "_") | (path_id "{" "}") | CHAR_LIT | INTEGER_LIT | ("-" INTEGER_LIT) | TYPED_INTEGER_LIT | ("-" TYPED_INTEGER_LIT) | "true" | "false" | "_" | "default"

type_expr ::= base_type ("^" expr)*

base_type ::= "bool" | "signed" "<<" expr ">>" | "int8" | "int16" | "int32" | "int64" | "unsigned" "<<" expr ">>" | "uint8" | "uint16" | "uint32" | "uint64" | "float32" | "float64" | "char" | path_id | typevar

group_expr ::= ("(" group ")")

group ::= group_item_list

group_item_list ::= group_item ("," group_item)*

group_item ::= expr | label_expr

group_adaptation ::= ("." "(" group_renamings_o ")")

group_renamings_o ::= group_renamings?

group_renamings ::= renaming ("," renaming)*

renaming ::= id | (id ":") | (id ":" id) | INTEGER_LIT | (INTEGER_LIT ":") | (INTEGER_LIT ":" id)

label_expr ::= ID ":" expr

composite_expr ::= (path_id "group" "(" expr ")") | "(" expr "." label_or_index_l "default" expr ")" | "[" group "]" | struct_expr | variant_expr | "(" expr "with" modifier_l SC_o ")"

label_or_index ::= ("." ID) | ("[" expr "]")

label_or_index_l ::= label_or_index+

struct_expr ::= ("{" group "}") | ("{" group "}" ":" path_id)

variant_expr ::= path_id "{" group "}"

modifier_l ::= modifier (";" modifier)*

modifier ::= (label_or_index_l "=" expr)

switch_expr ::= ("if" expr "then" expr "else" expr) # %prec if_then_else | ("(" "case" expr "of" case_expr_l ")")

case_expr_l ::= case_expr+

case_expr ::= "|" pattern ":" expr

fwd_expr ::= "forward" luid_o fwd_restart_resume dim_l_o fwd_body "returns" "(" returns_group ")"

fwd_restart_resume ::= ("restart" | "resume")?

dim_l_o ::= dim_l

dim_l ::= dim+

dim ::= ("<<" expr ">>" dim_with) | ("<<" expr ">>") | "dim"

dim_with ::= ("with" "<<" ID ">>" current_elt_l) | ("with" current_elt_nel)

current_elt_nel ::= current_elt+

current_elt_l ::= current_elt_nel?

current_elt ::= current_lhs "=" expr ";"

current_lhs ::= ID | ("[" current_lhs "]")

fwd_body ::= unless_condition_o scope_section_l until_condition_o

unless_condition_o ::= ("unless" expr)?

until_condition_o ::= ("until" expr)?





DIGIT2 ::= [0-1]
DIGIT8 ::= [0-7]
DIGIT10 ::= [0-9]
DIGIT16 ::= [0-9a-fA-F]
LETTER ::= [a-zA-Z]
ALPHANUMERIC ::= DIGIT10 | LETTER | "_"
CHAR ::= ASCII | HEXA
CHAR_LIT ::= "'" CHAR "'"
FLOAT_LIT ::= FLOAT1 | FLOAT2
TYPED_FLOAT_LIT ::= FLOAT_LIT ("_f32" | "_f64")
INTEGER_LIT ::= INTEGER2 | INTEGER8 | INTEGER10 | INTEGER16
TYPED_INTEGER_LIT ::= INTEGER_LIT ("_i" | "_ui") ("8" | "16" | "32" | "64")
WORD ::= LETTER ALPHANUMERIC*
HEXA ::= "\\x" DIGIT16 DIGIT16
SPACE ::= " "
SYMBOL ::= "!" | "\"" | "$" | "#" | "%" | "&" | "’" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/"  | ":" | ";" | "<" | "=" | ">" | "?" | "@" | "[" | "]" | "\\" | "ˆ" | "`" | "|" | "{" | "}" | "˜"
ASCII ::= ALPHANUMERIC | SPACE | SYMBOL
INTEGER2 ::= "0b" DIGIT2+
INTEGER8 ::= "0o" DIGIT8+
INTEGER10 ::= "0" | (("1" | ... | "9") DIGIT10*)
INTEGER16 ::= "0x" DIGIT16+
EXPONENT ::= ("e" | "E") ("+" | "-")? DIGIT10+
FLOAT1 ::= DIGIT10+ "." DIGIT10* EXPONENT?
FLOAT2 ::= DIGIT10* "." DIGIT10+ EXPONENT?
LUNUM ::= "#" DIGIT10+
id ::= ID
operator_instance ::= operator
returns_group ::= group