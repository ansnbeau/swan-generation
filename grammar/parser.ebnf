# %nonassoc if_then_else
# %right ARROW
# %left LOR LXOR
# %left LAND
# %left OR XOR
# %left AND
# %left EQUAL DIFF LT GT LEQ GEQ
# %left LSL LSR
# %left PLUS MINUS
# %left MULT SLASH MOD
# %right PRE
# %right uarith upre
# %left WHEN
# %nonassoc NOT LNOT
# %left POW
# %left AROBA
# %left DOT LSQB
CHAR_LIT := "<missing>"
EOF := "<missing>"
FLOAT32 := "<missing>"
FLOAT64 := "<missing>"
FLOAT_LIT := "<missing>"
ID := "<missing>"
INT16 := "<missing>"
INT32 := "<missing>"
INT64 := "<missing>"
INT8 := "<missing>"
INTEGER_LIT := "<missing>"
LUID := "<missing>"
LUNUM := "<missing>"
NAME := "<missing>"
RAW := "<missing>"
RAW_VAR := "<missing>"
START_0 := "<missing>"
START_1 := "<missing>"
START_2 := "<missing>"
START_3 := "<missing>"
START_4 := "<missing>"
START_5 := "<missing>"
START_6 := "<missing>"
START_7 := "<missing>"
START_8 := "<missing>"
START_9 := "<missing>"
TYPED_FLOAT_LIT := "<missing>"
TYPED_INTEGER_LIT := "<missing>"
UINT16 := "<missing>"
UINT32 := "<missing>"
UINT64 := "<missing>"
UINT8 := "<missing>"

starting_rules ::= (START_0 module_body)
 | (START_1 module_interface)
 | (START_2 interface_decl_entry)
 | (START_3 scope_section_entry)
 | (START_4 equation_entry)
 | (START_5 expr_entry)
 | (START_6 path_id_entry)
 | (START_7 op_expr_entry)
 | (START_8 operator_block_entry)
 | (START_9 user_op_decl_entry)

interface_decl_entry ::= interface_decl EOF

scope_section_entry ::= scope_section EOF

equation_entry ::= equation EOF

expr_entry ::= expr EOF

path_id_entry ::= path_id EOF

op_expr_entry ::= op_expr EOF

operator_block_entry ::= operator_block EOF

user_op_decl_entry ::= user_op_decl EOF

id ::= ID

id_or_raw ::= id
 | RAW

id_l ::= id
 | (id_l "," id)

id_or_raw_l ::= id_or_raw
 | (id_or_raw_l "," id_or_raw)

path_id ::= id
 | (path_id "::" id)

path_id_or_raw ::= path_id
 | RAW

name ::= NAME
 | RAW

luid ::= LUID
 | "luid"

# Optional
luid_o ::= luid?

lunum ::= LUNUM

# Optional
lunum_o ::= lunum?

module_body ::= body_decl_l EOF

module_interface ::= interface_decl_l EOF

use_directive ::= ("use" path_id ";")
 | ("use" path_id "as" id ";")

# Optional
body_decl_l ::= (body_decl_l body_decl)?

body_decl ::= use_directive
 | types_and_globals
 | user_op_decl
 | harness_decl
 | source_decl
 | RAW

# Optional
interface_decl_l ::= (interface_decl_l interface_decl)?

interface_decl ::= use_directive
 | types_and_globals
 | user_op_interface
 | RAW

types_and_globals ::= group_decls
 | type_decls
 | const_decls
 | sensor_decls

type_decls ::= "type" type_decl_l

# Optional
type_decl_l ::= (type_decl_l type_decl)?

type_decl ::= id type_def_o ";"

# Optional
type_def_o ::= ("=" type_def)?

type_def ::= type_expr
 | ("enum" "{" id_l "}")
 | variant_l
 | struct_texpr

numeric_kind ::= "numeric"
 | "integer"
 | "signed"
 | "unsigned"
 | "float"

type_expr ::= "bool"
 | ("signed" "<<" expr ">>")
 | INT8
 | INT16
 | INT32
 | INT64
 | ("unsigned" "<<" expr ">>")
 | UINT8
 | UINT16
 | UINT32
 | UINT64
 | FLOAT32
 | FLOAT64
 | "char"
 | path_id
 | typevar
 | (type_expr "^" expr_or_raw)

type_expr_or_raw ::= type_expr
 | RAW

struct_texpr ::= "{" field_decl_l "}"

field_decl_l ::= field_decl
 | (field_decl_l "," field_decl)

field_decl ::= id ":" type_expr

variant_l ::= variant
 | (variant_l "|" variant)

variant ::= id variant_type_expr

variant_type_expr ::= ("{" type_expr "}")
 | ("{" "}")
 | struct_texpr

typevar ::= NAME

typevar_l ::= typevar
 | (typevar_l "," typevar)

group_decls ::= "group" group_decl_l

# Optional
group_decl_l ::= (group_decl_l group_decl)?

group_decl ::= id "=" group_type_expr ";"

group_type_expr ::= type_expr
 | ("(" group_type_expr_l id_group_type_l_o ")")
 | ("(" id_group_type_expr_l ")")

group_type_expr_l ::= group_type_expr
 | (group_type_expr_l "," group_type_expr)

id_group_type_expr_l ::= id_group_type_expr
 | (id_group_type_expr_l "," id_group_type_expr)

id_group_type_expr ::= id ":" group_type_expr

# Optional
id_group_type_l_o ::= ("," id_group_type_expr_l)?

const_decls ::= "const" const_decl_l

# Optional
const_decl_l ::= (const_decl_l const_decl)?

const_decl ::= (id ":" type_expr ";")
 | (id ":" type_expr "=" expr ";")
 | (id "=" expr ";")

sensor_decls ::= "sensor" sensor_decl_l

# Optional
sensor_decl_l ::= (sensor_decl_l sensor_decl)?

sensor_decl ::= id ":" type_expr ";"

var_decl ::= (var_id var_type_expr_o when_decl_o default_decl_o last_decl_o)
 | RAW_VAR

# Optional
var_type_expr_o ::= (":" group_type_expr)?

var_id ::= id
 | ("clock" id)

# Optional
when_decl_o ::= ("when" clock_expr)?

# Optional
default_decl_o ::= ("default" "=" expr)?

# Optional
last_decl_o ::= ("last" "=" expr)?

var_decl_l ::= var_decl
 | (var_decl_l ";" var_decl)

harness_decl ::= "_harness" id_or_raw opt_body

source_decl ::= ("_source" id_or_raw id ";")
 | ("_oracle" id_or_raw id ";")

user_op_decl ::= inline_o op_kind id_or_raw size_decl_o params "returns" params where_decls_o spec_decl_o opt_body

user_op_interface ::= inline_o op_kind id_or_raw size_decl_o params "returns" params where_decls_o spec_decl_o ";"

# Optional
inline_o ::= "inline"?

op_kind ::= "function"
 | "node"

# Optional
size_decl_o ::= ("<<" id_or_raw_l ">>")?

params ::= ("(" ")")
 | ("(" var_decl_l SC_o ")")

# Optional
SC_o ::= ";"?

# Optional
where_decls_o ::= (where_decls_o where_decl)?

where_decl ::= ("where" typevar_l numeric_kind)
 | ("where" RAW numeric_kind)

# Optional
spec_decl_o ::= ("specialize" path_id_or_raw)?

opt_body ::= ";"
 | data_def

data_def ::= equation
 | scope

scope ::= "{" scope_section_l "}"

# Optional
scope_section_l ::= (scope_section_l scope_section)?

scope_section ::= variable_section
 | equation_section
 | emission_section
 | assert_section
 | diagram_section
 | RAW

variable_section ::= "var" var_decl_l_o

# Optional
var_decl_l_o ::= (var_decl_l ";")?

equation_section ::= "let" equation_l_o

# Optional
equation_l_o ::= equation_l?

equation_l ::= equation
 | (equation_l equation)

assert_section ::= assert_kind verif_expr_l

assert_kind ::= "assert"
 | "assume"
 | "guarantee"

# Optional
verif_expr_l ::= (verif_expr_l verif_expr)?

verif_expr ::= luid ":" expr ";"

equation ::= (lhs luid_o "=" expr ";")
 | (def_by_case ";")
 | (sensor_lhs ":=" expr ";")

def_by_case ::= (lhs_o state_machine)
 | (lhs_o select_activation)

# Optional
lhs_o ::= (lhs ":")?

lhs ::= ("(" ")")
 | lhs_item_l
 | (lhs_item_l "," "..")

lhs_item_l ::= lhs_item
 | (lhs_item_l "," lhs_item)

lhs_item ::= id
 | "_"

emission_section ::= "emit" emission_body_l_o

# Optional
emission_body_l_o ::= (emission_body_l_o emission_body ";")?

emission_body ::= (luid_o flow_names)
 | (luid_o flow_names "if" expr)

flow_names ::= NAME
 | (flow_names "," NAME)

select_activation ::= ("activate" luid_o if_activation)
 | ("activate" luid_o match_activation)

if_activation ::= "if" expr_or_raw "then" ifte_branch elsif_branch_l "else" ifte_branch

# Optional
elsif_branch_l ::= (elsif_branch_l "elsif" expr_or_raw "then" ifte_branch)?

ifte_branch ::= data_def
 | if_activation

match_activation ::= "when" expr_or_raw "match" match_l

match_l ::= match
 | (match_l match)

match ::= "|" pattern_with_capture ":" data_def

state_machine ::= "automaton" luid_o state_machine_item_l

# Optional
state_machine_item_l ::= (state_machine_item_l state_machine_item)?

state_machine_item ::= state_decl
 | transition_decl

state_decl ::= initial_o "state" state_id ":" unless_o scope_section_l until_o

# Optional
initial_o ::= "initial"?

state_id ::= id_or_raw
 | lunum
 | (lunum id_or_raw)

# Optional
unless_o ::= ("unless" transition_l)?

# Optional
until_o ::= ("until" transition_l)?

transition_l ::= transition
 | (transition_l transition)

transition_decl ::= (priority state_ref "unless" transition)
 | (priority state_ref "until" transition)

priority ::= (":" ":")
 | (":" INTEGER_LIT ":")

state_ref ::= id_or_raw
 | LUNUM

transition ::= ("if" guarded_arrow ";")
 | (scope_o target ";")

guarded_arrow ::= "(" expr_or_raw ")" arrow

arrow ::= (scope_o target)
 | (scope_o fork)

# Optional
scope_o ::= scope?

target ::= ("restart" state_ref)
 | ("resume" state_ref)

fork ::= ("if" guarded_arrow elsif_guarded_arrow_l else_arrow_o "end")
 | (fork_priority_l "end")

# Optional
elsif_guarded_arrow_l ::= (elsif_guarded_arrow_l "elsif" guarded_arrow)?

# Optional
else_arrow_o ::= ("else" arrow)?

# Optional
fork_priority_l ::= (fork_priority_l fork_priority)?

fork_priority ::= (priority "if" guarded_arrow)
 | (priority "else" arrow)

diagram_section ::= "diagram" object_l

# Optional
object_l ::= (object_l object)?

object ::= "(" description local_objects ")"

description ::= (lunum_o luid_o graph_item)
 | def_by_case
 | scope_section
 | (lunum_o test_description)

graph_item ::= ("expr" expr_or_raw)
 | ("def" lhs)
 | ("def" RAW)
 | ("block" operator_block)
 | ("wire" connection "=>" connection_l)
 | ("group" group_operation_o)

test_description ::= ("_sensor" sensor_lhs)
 | ("_sensor" RAW)

sensor_lhs ::= path_id

# Optional
local_objects ::= ("where" object_l)?

# Optional
group_operation_o ::= (("(" ")")
 | "byname"
 | "bypos")?

connection_l ::= connection
 | (connection_l "," connection)

connection ::= (port group_adaptation)
 | port
 | ("(" ")")

port ::= instance_id

instance_id ::= luid
 | lunum
 | "self"

expr ::= id_expr
 | atom
 | unary_op_expr
 | expr_binary_op_expr
 | (expr_or_raw "when" clock_expr)
 | (expr_or_raw "when" "match" path_id)
 | ("(" expr_or_raw ":>" type_expr_or_raw ")")
 | group_expr
 | composite_expr
 | switch_expr
 | fwd_expr
 | (operator_instance "(" group ")")
 | port
 | multigroup_prefix

expr_or_raw ::= expr
 | RAW

id_expr ::= path_id
 | ("last" name)

atom ::= "true"
 | "false"
 | CHAR_LIT
 | INTEGER_LIT
 | TYPED_INTEGER_LIT
 | FLOAT_LIT
 | TYPED_FLOAT_LIT

unary_op_expr ::= ("-" expr_or_raw) # %prec uarith
 | ("+" expr_or_raw)
 | ("lnot" expr_or_raw)
 | ("not" expr_or_raw)
 | ("pre" expr_or_raw) # %prec upre

expr_binary_op_expr ::= (expr_or_raw "+" expr_or_raw)
 | (expr_or_raw "-" expr_or_raw)
 | (expr_or_raw "*" expr_or_raw)
 | (expr_or_raw "/" expr_or_raw)
 | (expr_or_raw "mod" expr_or_raw)
 | (expr_or_raw "land" expr_or_raw)
 | (expr_or_raw "lor" expr_or_raw)
 | (expr_or_raw "lxor" expr_or_raw)
 | (expr_or_raw "lsl" expr_or_raw)
 | (expr_or_raw "lsr" expr_or_raw)
 | (expr_or_raw "=" expr_or_raw)
 | (expr_or_raw "<>" expr_or_raw)
 | (expr_or_raw "<" expr_or_raw)
 | (expr_or_raw ">" expr_or_raw)
 | (expr_or_raw "<=" expr_or_raw)
 | (expr_or_raw ">=" expr_or_raw)
 | (expr_or_raw "and" expr_or_raw)
 | (expr_or_raw "or" expr_or_raw)
 | (expr_or_raw "xor" expr_or_raw)
 | (expr_or_raw "->" expr_or_raw)
 | (expr_or_raw "pre" expr_or_raw)
 | (expr_or_raw "@" expr_or_raw)

n_ary_op ::= "+"
 | "*"
 | "@"
 | "and"
 | "or"
 | "xor"
 | "land"
 | "lor"

multigroup_prefix ::= ("window" "<<" expr_or_raw ">>" "(" group ")" "(" group ")")
 | ("merge" group_l)

group_l ::= ("(" group ")")
 | (group_l "(" group ")")

clock_expr ::= id
 | ("not" id)
 | ("(" id "match" pattern_or_raw ")")

group_expr ::= ("(" group ")")
 | (expr_or_raw group_adaptation)

# Optional
group ::= group_item_list?

group_item_list ::= group_item
 | (group_item_list "," group_item)

group_item ::= expr_or_raw
 | label_expr

group_adaptation ::= ("." "(" group_renamings_o ")")
 | ("." "(" RAW ")")

# Optional
group_renamings_o ::= group_renamings?

group_renamings ::= renaming
 | (group_renamings "," renaming)

renaming ::= id
 | (id ":")
 | (id ":" id)
 | INTEGER_LIT
 | (INTEGER_LIT ":")
 | (INTEGER_LIT ":" id)

composite_expr ::= (expr_or_raw label_or_index)
 | (path_id_or_raw "group" "(" expr_or_raw ")")
 | (expr_or_raw "[" expr_or_raw ".." expr_or_raw "]")
 | ("(" expr_or_raw "." label_or_index_l "default" expr_or_raw ")")
 | (expr_or_raw "^" expr_or_raw)
 | ("[" group "]")
 | struct_expr
 | variant_expr
 | ("(" expr_or_raw "with" modifier_l SC_o ")")

struct_expr ::= ("{" group "}")
 | ("{" group "}" ":" path_id_or_raw)

variant_expr ::= path_id_or_raw "{" group "}"

modifier_l ::= modifier
 | (modifier_l ";" modifier)

modifier ::= (label_or_index_l "=" expr_or_raw)
 | (RAW "=" expr_or_raw)

label_expr ::= id_or_raw ":" expr_or_raw

label_or_index ::= ("." id_or_raw)
 | ("[" expr_or_raw "]")

label_or_index_l ::= label_or_index
 | (label_or_index_l label_or_index)

switch_expr ::= ("if" expr_or_raw "then" expr_or_raw "else" expr_or_raw) # %prec if_then_else
 | ("(" "case" expr_or_raw "of" case_expr_l ")")

case_expr_l ::= case_expr
 | (case_expr_l case_expr)

case_expr ::= "|" pattern_or_raw ":" expr_or_raw

pattern_or_raw ::= pattern
 | RAW

pattern ::= path_id
 | (path_id "_")
 | (path_id "{" "}")
 | CHAR_LIT
 | INTEGER_LIT
 | ("-" INTEGER_LIT)
 | TYPED_INTEGER_LIT
 | ("-" TYPED_INTEGER_LIT)
 | "true"
 | "false"
 | "_"
 | "default"

pattern_with_capture ::= pattern_or_raw
 | (path_id "{" id "}")

fwd_expr ::= "forward" luid_o fwd_restart_resume dim_l_o fwd_body "returns" "(" returns_group ")"

fwd_body ::= unless_condition_o scope_section_l until_condition_o

# Optional
unless_condition_o ::= ("unless" expr_or_raw)?

# Optional
until_condition_o ::= ("until" expr_or_raw)?

# Optional
fwd_restart_resume ::= ("restart"
 | "resume")?

dim_l_o ::= dim_l
 | RAW

dim_l ::= dim
 | (dim_l dim)

dim ::= ("<<" expr ">>" dim_with)
 | ("<<" expr ">>")
 | "dim"

dim_with ::= ("with" "<<" id ">>" current_elt_l)
 | ("with" current_elt_nel)

current_elt_nel ::= current_elt
 | (current_elt_nel current_elt)

# Optional
current_elt_l ::= current_elt_nel?

current_elt ::= current_lhs "=" expr ";"

current_lhs ::= id
 | ("[" current_lhs "]")

# Optional
returns_group ::= returns_item_l?

returns_item_l ::= returns_item
 | (returns_item_l "," returns_item)

returns_item ::= item_clause
 | array_clause
 | (id "=" array_clause)
 | RAW

item_clause ::= id
 | (id ":" fwd_last_default)

array_clause ::= ("[" item_clause "]")
 | ("[" array_clause "]")

fwd_last_default ::= ("last" "=" expr)
 | ("default" "=" expr)
 | ("last" "=" expr "default" "=" expr)
 | ("last" "=" "default" "=" expr)

operator_block ::= operator
 | op_expr

operator_instance ::= operator luid_o

operator ::= prefix_op size_spec_o

prefix_op ::= path_id
 | prefix_primitive
 | ("(" op_expr ")")
 | ("(" "op_expr" ")")
 | RAW

# Optional
size_spec_o ::= ("<<" expr_list ">>")?

expr_list ::= expr_or_raw
 | (expr_list "," expr_or_raw)

op_expr ::= (iterator operator)
 | ("activate" operator "every" clock_expr)
 | ("activate" operator "every" expr_or_raw activate_condition_kind expr_or_raw)
 | ("restart" operator "every" expr_or_raw)
 | anonymous_op
 | (operator "\" partial_group)
 | n_ary_op
 | ("_source" id_or_raw)
 | ("_oracle" id_or_raw)

activate_condition_kind ::= "last"
 | "default"

anonymous_op ::= (op_kind params "returns" params data_def)
 | (op_kind id_l scope_section_l "=>" expr_or_raw)

prefix_primitive ::= "reverse"
 | "transpose"
 | ("transpose" "{" integer_l "}")
 | ("transpose" RAW)
 | "pack"
 | "flatten"

integer_l ::= INTEGER_LIT
 | (integer_l "," INTEGER_LIT)

iterator ::= "map"
 | "fold"
 | "mapfold"
 | "mapi"
 | "foldi"
 | "mapfoldi"

partial_group ::= opt_group_item
 | (partial_group "," opt_group_item)

opt_group_item ::= "_"
 | group_item

