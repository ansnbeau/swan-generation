root ::= module_body_file

digit2 ::= [0-1]
digit8 ::= [0-7]
digit10 ::= [0-9]
digit16 ::= [a-f] | [A-F] | [0-9]
integer2 ::= "0b" digit2+
integer8 ::= "0o" digit8+
integer10 ::= "0" | [1-9] digit10*
integer16 ::= "0x" digit16+
integer ::= integer2 | integer8 | integer10 | integer16
typed_integer ::= integer ( "_i" | "_ui" ) ("8" | "16" | "32" | "64")
exponent ::= [eE] ("+" | "-")? digit10+
float ::= digit10+ "." digit10* exponent? | digit10* "." digit10+ exponent?
typed_float ::= float ("_f32" | "_f64")
letter ::= [a-z] | [A-Z]
alphanumeric ::= digit10 | letter | "_"
word ::= letter alphanumeric*
space ::= " "
ascii ::= alphanumeric | space | [!"$#%&’()*+,-./:; <=> ?@[\]\\ˆ`|{}˜]
hexa ::= "\\x" digit16 digit16
character ::= ascii | hexa
char ::= "'" character "'"
id ::= word
name ::= "'" id
luid ::= "$" id
lunum ::= "#" digit10+

module_body_file ::= use_clause* body_decls* "\n"
module_interface_file ::= use_clause* interface_decls* "\n"

use_clause ::= "use" path_id [ "as" id ] ";"

path_id ::= (id "::")* id

body_decls ::= types_and_globals | user_op_decl
interface_decls ::= types_and_globals | user_op_interface

types_and_globals ::= "group" (group_decl ";")* | "type" (type_decl ";")* | "const" (const_decl ";")* | "sensor" (sensor_decl ";")*


type_decl ::= id [ "=" type_def ]


type_def ::= type_expr | "enum " ( id ( "," id )* )* | variant ( "|" variant )* | struct_texpr

type_expr ::= "bool" | "int8" | "int16" | "int32" | "int64" | "uint8" | "uint16" | "uint32" | "uint64" | "float32" | "float64" | "char" | path_id | typevar | type_expr "^" expr

struct_texpr ::= "{" field_decl ( "," field_decl )* "}"
field_decl ::= id ":" type_expr
variant ::= id variant_type_expr
variant_type_expr ::= "{" [ type_expr ] "}" | struct_texpr
typevar ::= name

group_decl ::= id "=" group_type_expr

group_type_expr ::= type_expr | "(" group_type_expr ( "," group_type_expr )* ( "," id ":" group_type_expr )* ")" | "(" id ":" group_type_expr ( "," id ":" group_type_expr )* ")"

const_decl ::= id ":" type_expr [ "=" expr]
sensor_decl ::= id ":" type_expr

var_decl ::= var_id [ ":" group_type_expr ] [ "when" clock_expr ] [ "default" "=" expr ] [ "last" "=" expr ]
var_id ::= [ "clock" ] id

user_op_decl ::= [ "inline" ] op_kind id [ size_decl ] params "returns" params ( where_decl )* [ spec_decl ] opt_body
user_op_interface ::= [ "inline" ] op_kind id [ size_decl ] params "returns" params ( where_decl )* [ spec_decl ] ";"

op_kind ::= "function" | "node "

size_decl ::= "<<" id ( "," id )* ">>"

params ::= "(" ( ( var_decl ";" )* var_decl (";" )? )? ")"

where_decl ::= "where" typevar ( "," typevar )* numeric_kind
numeric_kind ::= "numeric" | "float" | "integer" | "signed" | "unsigned"
spec_decl ::= "specialize" path_id
opt_body ::= ";" | data_def

data_def ::= equation " ; " | scope
scope ::= "{" scope_sections "}"
scope_sections ::= ( scope_section )*
scope_section ::= "var" ( var_decl ";" )* | "let" ( equation ";" )* | "emit" ( [ luid ] emission_body ";" )* | assert_kind ( luid ":" expr ";" )* | "diagram" ( object )*
assert_kind ::= "assume" | "assert" | "guarantee"

equation ::= lhs [ luid ] "=" expr | def_by_case
lhs ::= "(" ")" | lhs_item ( "," lhs_item )* [ "," ".." ]
lhs_item ::= id | "_"
def_by_case ::= [ lhs ":" ] (state_machine | select_activation)

emission_body ::= flow_names [ " if " expr]
flow_names ::= name ( "," name )*

select_activation ::= "activate" [ luid ] ( if_activation | match_activation )
match_activation ::= "when" expr "match" ( "|" pattern_with_capture ":" data_def )+
if_activation ::= "if" expr "then" ifte_branch ( "elseif" expr "then" ifte_branch )* "else" ifte_branch
ifte_branch ::= data_def | if_activation

state_machine ::= "automaton" [ luid ] ( state_decl | transition_decl )*
state_decl ::= [ "initial" ] "state" state_id " : " [ "unless" ( transition )+ ] scope_sections [ "until" ( transition )+ ]
state_id ::= id | lunum [ id ]
transition_decl ::= priority state_ref ( "unless" | "until" ) transition
priority ::= ":" [ integer ] ":"
state_ref ::= lunum | id

transition ::= "if" guarded_arrow ";" | [ scope ] target ";"
guarded_arrow ::= "(" expr ")" arrow
arrow ::= [ scope ] (target | fork)
target ::= ( "restart" | "resume" ) state_ref
fork ::= "if" guarded_arrow ( "elseif" guarded_arrow )* [ "else" arrow ] "end" | ( fork_priority )* "end"
fork_priority ::= priority "if" guarded_arrow | priority "else" arrow

object ::= "(" description [ local_objects ] ")"
local_objects ::= "where" ( object )*
description ::= [ lunum ] [ luid ] graph_item | def_by_case | scope_section
graph_item ::= "expr" expr | "def" lhs | "block" operator_block | "group" [ group_operation ] | "wire" connection "=>" connection ( "," connection )*
group_operation ::= "(" ")" | "byname" | "bypos"
connection ::= port [ group_adaptation ] | "(" ")"
port ::= instance_id
instance_id ::= lunum | luid | "self"

expr ::= id_expr | atom | unary_op expr | expr binary_op expr | expr "when" clock_expr | expr "when" "match" path_id | "(" expr ":>" type_expr ")" | group_expr | composite_expr | switch_expr | fwd_expr | operator_instance "(" group ")" | port | multigroup_prefix
id_expr ::= path_id | "last" name
atom ::= "true" | "false" | char | integer | typed_integer | float | typed_float
unary_op ::= "-" | "+" | "lnot" | "not" | "pre"
binary_op ::= "+" | "-" | "*" | "/" | "mod" | "land" | "lor" | "lxor" | "lsl" | "lsr" | "=" | "<>" | "<" | ">" | "<=" | ">=" | "and" | "or" | "xor" | "->" | "pre" | "@"
n_ary_op ::= "+" | "*" | "@" | "and" | "or" | "xor" | "land" | "lor"
multigroup_prefix ::= "window" size "(" group ")" "(" group ")" | "merge" "(" group ")" ( "(" group ")" )*
size ::= "<<" expr ">>"

clock_expr ::= id | "not" id | "(" id "match" pattern ")"
group_expr ::= "(" group ")" | expr group_adaptation
group ::= [ group_item ( "," group_item )* ]
group_item ::= [ id ":" ] expr

group_adaptation ::= "." "(" group_renamings ")"
group_renamings ::= [ renaming ( "," renaming )* ]
renaming ::= (id | integer) ( ":" ( id )? )?
composite_expr ::= expr label_or_index | path_id "group" "(" expr ")" | expr "[" expr ".." expr "]" | "(" expr "." ( label_or_index )+ "default" expr ")" | expr "^" expr | "[" group "]" | struct_expr | variant_expr | "(" expr "with" modifier ( ";" modifier )* [ ";" ] ")"
struct_expr ::= "{" group "}" ":" path_id
variant_expr ::= path_id "{" group "}"
modifier ::= ( label_or_index )+ "=" expr
label_or_index ::= "." id | "[" expr "]"
switch_expr ::= "if" expr "then" expr "else" expr | "(" "case" expr "of" ( "|" pattern ":" expr )* ")"

pattern ::= path_id | path_id "_" | path_id "{" "}" | char | [ "-" ] integer | [ "-" ] typed_integer | "true" | "false" | "_" | "default"
pattern_with_capture ::= pattern | path_id "{" id "}"
fwd_expr ::= "forward" [ luid ] [ ( "restart" | "resume" ) ] ( dim )+ fwd_body "returns" "(" returns_group ")"
fwd_body ::= [ "unless" expr ] scope_sections [ "until" expr ]
dim ::= size [ "with" ( "<<" id ">>" | current_elt ) ( current_elt )* ]
current_elt ::= current_lhs "=" expr ";"
current_lhs ::= id | "[" current_lhs "]"
returns_group ::= [ returns_item ("," returns_item)* ]
returns_item ::= item_clause | [ id "=" ] array_clause
returns_clause ::= item_clause | array_clause
item_clause ::= id [ ":" last_default ]
last_default ::= "last" "=" expr | "default" "=" expr | "last" "=" expr "default" "=" expr | "last" "=" "default" "=" expr
array_clause ::= "[" returns_clause "]"

operator_block ::= operator | op_expr
operator_instance ::= operator [ luid ]
operator ::= prefix_op [ sizes ]
sizes ::= "<<" expr ( "," expr )* ">>"
prefix_op ::= path_id | prefix_primitive | "(" op_expr ")"
op_expr ::= iterator operator | "activate" operator "every" clock_expr | "activate" operator "every" expr ("last" | "default") expr | "restart" operator "every" expr | op_kind anonymous_op | operator "\\" partial_group | n_ary_op
anonymous_op ::= params "returns" params data_def | id ( "," id )* scope_sections "=>" expr
prefix_primitive ::= "reverse" | "transpose" ( "{" ( ( integer "," )? integer ) "}" )? | "pack" | "flatten"
iterator ::= "map" | "fold" | "mapfold" | "mapi" | "foldi" | "mapfoldi"
partial_group ::= opt_group_item ( "," opt_group_item )
opt_group_item ::= "_" | group_item
